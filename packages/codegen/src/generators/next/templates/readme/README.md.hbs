<div align="center">
    <p align="center">
      <img src="./.readme/MoralisLogo.png" alt="Moralis NextJS" />
    </p>
</div>

<div align="center">

![npm](https://img.shields.io/npm/v/@moralisweb3/next)
![node-current](https://img.shields.io/node/v/@moralisweb3/next)
![GitHub last commit](https://img.shields.io/github/last-commit/MoralisWeb3/@moralisweb3/next)
![npm bundle size](https://img.shields.io/bundlephobia/minzip/@moralisweb3/next)
![npm type definitions](https://img.shields.io/npm/types/@moralisweb3/next)

</div>

# `@moralisweb3/next`

> Moralis Hooks for your NextJS project

This project is a thin NextJS wrapper around [Moralis](https://moralis.io/), to easily call functionalities and display data.

Please check the [official documentation of Moralis](https://docs.moralis.io/) for all the functionalities of Moralis.

# ⚙️ Quick start

Make sure to have `next`, `react`, `react-dom` and `moralis` installed as dependencies, then install `@moralisweb3/next`

In short:

```sh
npm install moralis @moralisweb3/next
```

or

```sh
yarn add moralis @moralisweb3/next
```

> Make sure to also  `moralis` to the latest version, when you update `@moralisweb3/next`.

# Authentication and Session Management with NextAuth

The `@moralisweb3/next` library provides first class tools for web3 authentication. Using the [NextAuth.js](https://next-auth.js.org/) and our custom `MoralisNextAuthProvider()` you can implement web3 authentication you can create web3 authentication for any web3 wallet.

```sh
yarn add next-auth
```

Create `pages/api/auth/[...nextauth].ts` file in your NextJS app with following content:

```jsx
import NextAuth, { ISODateString } from 'next-auth';
import { MoralisNextAuthProvider } from '@moralisweb3/next';

export type TUserData = {
  address: string;
  signature: string;
  profileId: string;
  expirationTime: ISODateString;
};

export interface ISession {
  user: TUserData;
}

// For more information on each option (and a full list of options) go to
// https://next-auth.js.org/configuration/options
export default NextAuth({
  providers: [MoralisNextAuthProvider()],
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.user = user;
      }
      return token;
    },
    async session({ session, token }) {
      session.expires = (token as unknown as ISession).user.expirationTime;
      (session as unknown as ISession).user = (token as unknown as ISession).user;
      return session;
    },
  },
});
```

Add web3 authentication logic to your component:

```jsx
import { useAccount, useConnect, useDisconnect, useSignMessage } from 'wagmi';
import { MetaMaskConnector } from 'wagmi/connectors/metaMask';
import { signIn } from 'next-auth/react';
import { useRouter } from 'next/router';
import { useAuthMessage } from '@moralisweb3/next';

const Authentication = () => {
  const { connectAsync } = useConnect({ connector: new MetaMaskConnector() });
  const { disconnectAsync } = useDisconnect();
  const { isConnected } = useAccount();
  const { getMessage } = useAuthMessage();
  const { signMessageAsync } = useSignMessage();
  const { push } = useRouter();

  const handleAuth = async () => {
    if (isConnected) {
      await disconnectAsync();
    }

    const { account, chain } = await connectAsync();

    const message = await getMessage({
      network: 'evm',
      domain: 'amazing.finance',
      chain: chain.id,
      address: account,
      uri: window.location.origin,
      timeout: 120,
    });

    if (message?.message) {
      const signature = await signMessageAsync({ message: message.message });

      signIn('credentials', { message, signature, redirect: false }).then(() =>
        // redirects to main page
        push('/'),
      );
    }
  };

  return (
    <div>
      <h3>Web3 Authentication</h3>
      <button onClick={handleAuth}> Authenticate with Metamask</button>
    </div>
  );
};

export default Authentication;
```

# Hook Usage Example

```jsx
import { useEvmWalletTokenBalances } from '@moralisweb3/next'

const App = () => {
  const { data: balance, error, refetch, isValidating } = useEvmWalletTokenBalances({ address: '0x...' })

  if (isValidating) return <div>Fetching/Refreshing balance…</div>
  if (error) return <div>{JSON.stringify(error, null, 2)}</div>
  return (
    <>
      <button onClick={refetch}>Refetch Balance</button>
      <div>{JSON.stringify(balance, null, 2)}</div>
    </>
  )
}
```

# Hooks