<div align="center">
    <p align="center">
      <img src="https://raw.githubusercontent.com/MoralisWeb3/Moralis-JS-SDK/main/packages/react/.readme/MoralisLogo.png" alt="Moralis React" />
    </p>
</div>

<div align="center">

![npm](https://img.shields.io/npm/v/@moralisweb3/react)
![npm bundle size](https://img.shields.io/bundlephobia/minzip/@moralisweb3/react)
![npm type definitions](https://img.shields.io/npm/types/@moralisweb3/react)

</div>

# `@moralisweb3/react`

> Moralis Hooks for your React project

This project is a thin React wrapper around [Moralis](https://moralis.io/), to easily call functionalities and display data. It  serves as a proxy, to allow users to access Moralis APIs in client-side.

Please check the [official documentation of Moralis](https://docs.moralis.io/) for all the functionalities of Moralis.

# üöÄ Quick start

### 1. Install Dependencies

Make sure to have `react` and `react-dom` installed as dependencies, then install `@moralisweb3/react`

In short:

```sh
npm install @moralisweb3/react react react-dom
```

or

```sh
yarn add  @moralisweb3/react react react-dom
```

### 2. Add MoralisProvider

Then wrap your app in a <MoralisProvider>, and provide your apiKey to the `config` prop:

```js
import React from "react";
import ReactDOM from "react-dom";
import { MoralisProvider } from "@moralisweb3/react";

const config = { apiKey: 'YOUR_API_KEY' }

ReactDOM.render(
  <MoralisProvider config={config}>
    <App />
  </MoralisProvider>,
  document.getElementById("root"),
);
```

# ‚≠êÔ∏è Star us

If this "@moralisweb3/react" library helps you build your dapps faster - please star this project, every star makes us very happy!

# ü§ù Need help

If you need help with setting up the boilerplate or have other questions - don't hesitate to write in our community forum and we will check asap. [Forum link](https://forum.moralis.io). The best thing about this SDK is the super active community ready to help at any time! We help each other.

# üß≠ Table of Contents

- [üöÄ Quick start](#-quick-start)
  - [1. Install Dependencies](#1-install-dependencies)
  - [2. Create environment variables file](#2-create-environment-variables-file)
  - [3. Create API route](#2-create-api-route)
- [‚≠êÔ∏è Star us](#Ô∏è-star-us)
- [ü§ù Need help](#-need-help)
- [üß≠ Table of Contents](#-table-of-contents)
- [‚ú® Hook Usage Examples](#Ô∏è-hook-usage-examples)
  - [1. Provide params directly to the hook](#1-provide-params-directly-to-the-hook)
  - [2. Provide params to the fetch()](#2-provide-params-to-the-fetch)
  - [3. Disable Auto Data Fetching](#3-disable-auto-data-fetching)
- [‚öôÔ∏è Hook Advanced Config](#Ô∏è-hook-advanced-config)
- [Authentication Api Hooks](#authentication-api-hooks)
  - [useAuthRequestChallengeSolana](#Ô∏èuseAuthRequestChallengeSolana)
  - [useAuthRequestChallengeEvm](#useAuthRequestChallengeEvm)
- [Evm Api Hooks](#evm-api-hooks)
- [Solana Api Hooks](#solana-api-hooks)
- [üßô‚Äç‚ôÇÔ∏è Community](#Ô∏è-community)

# ‚ú® Hook Usage Examples

```jsx
import { useEvmWalletTokenBalances } from '@moralisweb3/react'

const App = () => {
  const { data: balance, error, fetch, isFetching } = useEvmWalletTokenBalances({ address: '0x...' })

  if (isFetching) return <div>Fetching/Refreshing balance‚Ä¶</div>
  if (error) return <div>{JSON.stringify(error, null, 2)}</div>
  return (
    <>
      <button onClick={fetch}>Refetch Balance</button>
      <div>{JSON.stringify(balance, null, 2)}</div>
    </>
  )
}
```

Basically, there are three options how to fetch data with `@moralisweb3/react` hooks:

## 1. Provide params directly to the hook
In case all required params for the hook are defined you can provide them directly to the hook params. Data fetching in this case will be triggered automatically:
```jsx
import { useEvmWalletTokenBalances } from '@moralisweb3/react'

const App = () => {
  const { data: balance } = useEvmWalletTokenBalances({ address: '0x...' })

  return (
      <div>{JSON.stringify(balance, null, 2)}</div>
  )
}
```

## 2. Provide params to the fetch()
Sometimes you need to fetch data somewhere in your code or even fetch it twice with different variables. You can provide params to the `fetch()` function:
```jsx
import { useState } from 'react';
import { useEvmNativeBalance } from '@moralisweb3/react'
import { EvmChain } from 'moralis/common-evm-utils';

const App = () => {
  const { fetch } = useEvmNativeBalance();
  const [ethBalance, setEthBalance] = useState('');
  const [bnbBalance, setBnbBalance] = useState('');

  const fetchBalanceForEthereum = async () => {
    const response = await fetch({ address: '0x...', chain: EvmChain.ETHEREUM });
    if (response?.balance) {
      setEthBalance(response.balance.ether);
    }
  };

  const fetchBalanceForBsc = async () => {
    const response = await fetch({ address: '0x...', chain: EvmChain.BSC });
    if (response?.balance) {
      setBnbBalance(response.balance.ether);
    }
  };

  return (
    <div>
      <button onClick={fetchBalanceForEthereum}>Fetch Balance For Ethereum</button>
      <button onClick={fetchBalanceForBsc}>Fetch Balance For BSC</button>
      <p>Ethereum Balance: {ethBalance} Ether</p>
      <p>Binance Balance: {bnbBalance} BNB</p>
    </div>
  )
}
```
## 3. Disable Auto Data Fetching
To disable auto data fetching after your component has been mounted you can set `revalidateOnMount = false`. Example:

```jsx
import { useEvmWalletTokenBalances } from '@moralisweb3/react'

const App = () => {
  const { data: balance, fetch } = useEvmWalletTokenBalances({ address: '0x...' }, { revalidateOnMount: false })

  return (
    <>
      <button onClick={fetch}>Fetch Balance Manually</button>
      <div>{JSON.stringify(balance, null, 2)}</div>
    </>
  )
}
```

{{#each hookGuides}}
{{ this }}
{{/each}}

# ‚öôÔ∏è Advanced Config
The `config` property for `MoralisProvider` can be used not only to specify the API key, but also for additional Moralis instance settings. Example:

```js
import React from "react";
import ReactDOM from "react-dom";
import { MoralisProvider } from "@moralisweb3/react";

const config = { 
  apiKey: 'YOUR_API_KEY',
  formatEvmAddress: 'checksum',
  formatEvmChainId: 'decimal',
  logLevel: 'verbose'
}

ReactDOM.render(
  <MoralisProvider config={config}>
    <App />
  </MoralisProvider>,
  document.getElementById("root"),
);
```

Below, you can find the possible options for the `config`:

| Option             | Description                                                          | Default     | Required |
| -------------------| ---------------------------------------------------------------------|-------------|-------------------|
| `apiKey`           | Your Moralis ApiKey	                                                | `null`      |  yes  | 
| `formatEvmAddress` | Format style for evm addresses. Possible values: `'lowercase'`, `'checksum'`|`'lowercase'`|  no  | 
| `formatEvmChainId` | 	Format style for chains. Possible values: `'decimal'`, `'hex'`      |`'hex'`      |  no  | 
| `logLevel`         | 	Level of detail for log messages. Possible values: `'verbose'`, `'debug'`, `'info'`, `'warning'`, `'error'`, `'off'`|`'info'`|  no  | 
| `defaultSolNetwork`| 	Default network for Solana. Possible values: `SolNetworkish` type         |`'mainnet'`|  no  | 
| `defaultEvmApiChain`| 	Default chain for Evm. Possible values: `EvmChainish` type        |`'0x1'`      |  no  | 

The `@moralisweb3/react` hooks use [SWR](https://swr.vercel.app/) for a better developer experience while using API calls. You can provide [config object](https://swr.vercel.app/docs/options#options) as a `fetchConfig` prop to the `MoralisProvider` as it's shown bellow:

```js
const config = { 
  apiKey: 'YOUR_API_KEY',
}

const fetchConfig = {
  refreshInterval: 3000,
  revalidateOnFocus: true,
}

<MoralisProvider config={config} fetchConfig={fetchConfig}>
  <App />
</MoralisProvider>,
```

# üßô‚Äç‚ôÇÔ∏è Community

- [Discord](https://discord.gg/moralis)
- [Forum](https://forum.moralis.io)